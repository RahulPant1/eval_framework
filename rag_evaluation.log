2025-04-10 20:26:43,155 - INFO - Note: NumExpr detected 24 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 16.
2025-04-10 20:26:43,156 - INFO - NumExpr defaulting to 16 threads.
2025-04-10 20:26:43,288 - INFO - PyTorch version 2.3.1 available.
2025-04-10 20:26:44,517 - INFO - Setting up database connection...
2025-04-10 20:26:44,517 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:26:44,521 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:26:44,523 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:26:44,523 - INFO - Loading data from sample_data.csv...
2025-04-10 20:26:44,525 - INFO - Loaded 6 chunks from CSV file: sample_data.csv using utf-8 encoding
2025-04-10 20:26:44,533 - INFO - Dataset stored with ID: 67f7dc2cf894a49bc7150132
2025-04-10 20:26:44,533 - INFO - Adding chunks to vector store...
2025-04-10 20:26:44,533 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:26:44,535 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:26:44,536 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:26:44,540 - INFO - Use pytorch device_name: cuda
2025-04-10 20:26:44,540 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:26:47,627 - INFO - Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
2025-04-10 20:26:47,679 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:26:48,086 - INFO - Chunks successfully added to vector store
2025-04-10 20:26:48,086 - INFO - Generating synthetic QA pairs using Gemini 1.5 Flash...
2025-04-10 20:26:48,090 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 20:26:50,178 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?\nAnswer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, thus addressing limitations and producing more accurate and informative responses.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.027690554487294163
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 58,
        "total_token_count": 177
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:26:50,178 - INFO - Final extracted text: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?
Answer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, thus addressing limitations and producing more accurate and informative responses.

2025-04-10 20:26:50,179 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:26:50,180 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:26:51,011 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are vector databases and what are some examples?\nAnswer: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings representing semantic information.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.04305813962763006
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 55,
        "total_token_count": 174
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:26:51,011 - INFO - Final extracted text: Question: What are vector databases and what are some examples?
Answer: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings representing semantic information.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.

2025-04-10 20:26:51,011 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:26:51,012 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query.
2025-04-10 20:26:52,064 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems?\nAnswer: RAG systems are evaluated using retrieval-focused metrics (e.g., precision, recall, MRR) which assess document retrieval, and generation-focused metrics (e.g., BLEU, ROUGE, METEOR) which assess the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance are used.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.022458982467651368
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 126,
        "candidates_token_count": 90,
        "total_token_count": 216
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:26:52,064 - INFO - Final extracted text: Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems?
Answer: RAG systems are evaluated using retrieval-focused metrics (e.g., precision, recall, MRR) which assess document retrieval, and generation-focused metrics (e.g., BLEU, ROUGE, METEOR) which assess the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance are used.

2025-04-10 20:26:52,064 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:26:52,065 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made.
2025-04-10 20:26:52,880 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What documents are required for customer identification when opening a savings account?\nAnswer: Valid government-issued ID such as Aadhaar, PAN, Passport, or Voter ID are required, along with address proof.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.05102670192718506
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 208,
        "candidates_token_count": 44,
        "total_token_count": 252
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:26:52,880 - INFO - Final extracted text: Question: What documents are required for customer identification when opening a savings account?
Answer: Valid government-issued ID such as Aadhaar, PAN, Passport, or Voter ID are required, along with address proof.

2025-04-10 20:26:52,880 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:26:52,882 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 20:26:53,657 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are the minimum income and age requirements for a personal loan under these guidelines?\nAnswer: Salaried individuals must have a minimum monthly income of \u20b925,000 and be between 21 and 60 years old.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.07344735585726224
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 200,
        "candidates_token_count": 52,
        "total_token_count": 252
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:26:53,657 - INFO - Final extracted text: Question: What are the minimum income and age requirements for a personal loan under these guidelines?
Answer: Salaried individuals must have a minimum monthly income of ₹25,000 and be between 21 and 60 years old.

2025-04-10 20:26:53,658 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:26:53,659 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:26:54,645 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What is the resolution timeline for ATM transaction disputes?\nAnswer: Disputes must be resolved within 7 working days.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.016509911188712485
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 218,
        "candidates_token_count": 26,
        "total_token_count": 244
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:26:54,645 - INFO - Final extracted text: Question: What is the resolution timeline for ATM transaction disputes?
Answer: Disputes must be resolved within 7 working days.

2025-04-10 20:26:54,645 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:26:54,657 - INFO - Generated 6 QA pairs
2025-04-10 20:26:54,657 - INFO - Creating test suite...
2025-04-10 20:26:54,660 - INFO - Test suite created with ID: 67f7dc36f894a49bc715013b
2025-04-10 20:26:54,660 - INFO - Running evaluation with Gemini 1.5 Flash...
2025-04-10 20:26:54,663 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:26:54,665 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:26:54,666 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:26:54,669 - INFO - Use pytorch device_name: cuda
2025-04-10 20:26:54,669 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:26:57,525 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:26:57,550 - INFO - Calling generate_answers method
2025-04-10 20:26:57,550 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?

Context: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources. Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:26:58,495 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources.  Instead of relying solely on the model's internal knowledge (which may be outdated or incomplete), RAG first retrieves relevant information from a knowledge base, allowing the generative model to produce more accurate and informative responses.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.03886379462022048
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 304,
        "candidates_token_count": 65,
        "total_token_count": 369
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:27:00,117 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:27:00,120 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:27:00,121 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:27:00,123 - INFO - Use pytorch device_name: cuda
2025-04-10 20:27:00,123 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:27:02,869 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:27:02,888 - INFO - Calling generate_answers method
2025-04-10 20:27:02,888 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What are vector databases and what are some examples?

Context: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector. Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 20:27:04,939 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings.  These embeddings represent the semantic meaning and relationships of data like text or images in a numerical format.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.03130294356429786
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 295,
        "candidates_token_count": 57,
        "total_token_count": 352
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:27:04,944 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:27:04,946 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:27:04,947 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:27:04,949 - INFO - Use pytorch device_name: cuda
2025-04-10 20:27:04,949 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:27:07,498 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:27:07,518 - INFO - Calling generate_answers method
2025-04-10 20:27:07,518 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems?

Context: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources. Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:27:08,737 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Evaluation metrics for RAG systems fall into three categories:\n\n1. **Retrieval-focused metrics:**  These assess the quality of the retrieved documents, using metrics like precision, recall, and mean reciprocal rank (MRR).\n\n2. **Generation-focused metrics:** These evaluate the quality of the generated text itself, using metrics such as BLEU, ROUGE, and METEOR.\n\n3. **RAG-specific metrics:** These measure how well the generated response uses the retrieved information and answers the original query.  Examples include faithfulness and relevance.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.06338116499754759
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 301,
        "candidates_token_count": 111,
        "total_token_count": 412
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:27:08,752 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:27:08,755 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:27:08,757 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:27:08,760 - INFO - Use pytorch device_name: cuda
2025-04-10 20:27:08,760 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:27:11,745 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:27:11,760 - INFO - Calling generate_answers method
2025-04-10 20:27:11,760 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What documents are required for customer identification when opening a savings account?

Context: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions. Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:27:13,808 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the \"Standard Operating Procedure for Opening a Savings Account\" document, the required documents for customer identification are a valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID) and a separate address proof.  The ID must be verified against the address proof.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.0630168051555239
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 560,
        "candidates_token_count": 58,
        "total_token_count": 618
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:27:13,813 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:27:13,815 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:27:13,816 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:27:13,818 - INFO - Use pytorch device_name: cuda
2025-04-10 20:27:13,819 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:27:16,413 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:27:16,429 - INFO - Calling generate_answers method
2025-04-10 20:27:16,429 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What are the minimum income and age requirements for a personal loan under these guidelines?

Context: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions. Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:27:18,536 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the provided \"Personal Loan Disbursement Guidelines (Retail Banking Division)\" document, the minimum income requirement for a personal loan is \u20b925,000 per month, and the age requirement is between 21 and 60 years.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.032812905761430845
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 563,
        "candidates_token_count": 53,
        "total_token_count": 616
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:27:18,541 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:27:18,543 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:27:18,544 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:27:18,547 - INFO - Use pytorch device_name: cuda
2025-04-10 20:27:18,547 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:27:21,215 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:27:21,231 - INFO - Calling generate_answers method
2025-04-10 20:27:21,231 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What is the resolution timeline for ATM transaction disputes?

Context: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence. Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 20:27:23,005 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the provided text, ATM transaction disputes must be resolved within **7 working days**.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.19610545509739927
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 557,
        "candidates_token_count": 19,
        "total_token_count": 576
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:27:23,022 - INFO - Evaluation completed with 6 results
2025-04-10 20:27:23,024 - INFO - Generated metrics reports: reports/rag_evaluation_report_20250410_202723.html
2025-04-10 20:27:23,024 - INFO - Generated metrics report at: {'html': 'reports/rag_evaluation_report_20250410_202723.html'}
2025-04-10 20:27:28,224 - INFO - Cleaning up ChromaDB collection...
2025-04-10 20:27:28,224 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:27:28,229 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:27:28,230 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:27:28,234 - INFO - Use pytorch device_name: cuda
2025-04-10 20:27:28,234 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:27:30,780 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:27:30,780 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:27:30,782 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:27:30,783 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:27:30,809 - INFO - Successfully cleaned up eval_docs collection.
2025-04-10 20:27:30,809 - INFO - ChromaDB cleanup completed.
2025-04-10 20:31:50,620 - INFO - Note: NumExpr detected 24 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 16.
2025-04-10 20:31:50,620 - INFO - NumExpr defaulting to 16 threads.
2025-04-10 20:31:50,750 - INFO - PyTorch version 2.3.1 available.
2025-04-10 20:31:51,996 - INFO - Setting up database connection...
2025-04-10 20:31:51,996 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:31:52,001 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:31:52,002 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:31:52,002 - INFO - Loading data from sample_data.csv...
2025-04-10 20:31:52,005 - INFO - Loaded 6 chunks from CSV file: sample_data.csv using utf-8 encoding
2025-04-10 20:31:52,006 - INFO - Dataset stored with ID: 67f7dd6016d6e3cfc8cbba19
2025-04-10 20:31:52,006 - INFO - Adding chunks to vector store...
2025-04-10 20:31:52,006 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:31:52,009 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:31:52,010 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:31:52,013 - INFO - Use pytorch device_name: cuda
2025-04-10 20:31:52,013 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:31:54,987 - INFO - Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
2025-04-10 20:31:55,041 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:31:55,446 - INFO - Chunks successfully added to vector store
2025-04-10 20:31:55,446 - INFO - Generating synthetic QA pairs using Gemini 1.5 Flash...
2025-04-10 20:31:55,449 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 20:31:57,599 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?\nAnswer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, thus addressing limitations and producing more accurate and informative responses.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.027309360175297177
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 58,
        "total_token_count": 177
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:31:57,600 - INFO - Final extracted text: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?
Answer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, thus addressing limitations and producing more accurate and informative responses.

2025-04-10 20:31:57,600 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:31:57,602 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:31:58,455 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are vector databases and what types of data do they handle?\nAnswer: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings representing semantic information about text, images, or other data.  They use these numerical representations to capture meaning and relationships between data points.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.10426363869318886
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 63,
        "total_token_count": 182
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:31:58,456 - INFO - Final extracted text: Question: What are vector databases and what types of data do they handle?
Answer: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings representing semantic information about text, images, or other data.  They use these numerical representations to capture meaning and relationships between data points.

2025-04-10 20:31:58,456 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:31:58,458 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query.
2025-04-10 20:31:59,818 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems, and what aspects of the system do they assess?\nAnswer: RAG systems are evaluated using retrieval-focused metrics (precision, recall, MRR) which assess the relevance of retrieved documents, and generation-focused metrics (BLEU, ROUGE, METEOR) which evaluate the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance measure how well the generated response uses the retrieved information and answers the query.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.03369576463075442
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 126,
        "candidates_token_count": 107,
        "total_token_count": 233
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:31:59,818 - INFO - Final extracted text: Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems, and what aspects of the system do they assess?
Answer: RAG systems are evaluated using retrieval-focused metrics (precision, recall, MRR) which assess the relevance of retrieved documents, and generation-focused metrics (BLEU, ROUGE, METEOR) which evaluate the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance measure how well the generated response uses the retrieved information and answers the query.

2025-04-10 20:31:59,818 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:31:59,819 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made.
2025-04-10 20:32:00,582 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What documents are required for customer identification when opening a savings account?\nAnswer: Valid government-issued ID such as Aadhaar, PAN, Passport, or Voter ID are required, along with address proof.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.05121432109312578
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 208,
        "candidates_token_count": 44,
        "total_token_count": 252
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:32:00,582 - INFO - Final extracted text: Question: What documents are required for customer identification when opening a savings account?
Answer: Valid government-issued ID such as Aadhaar, PAN, Passport, or Voter ID are required, along with address proof.

2025-04-10 20:32:00,592 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:32:00,594 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 20:32:01,751 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are the minimum income and age requirements for a personal loan applicant?\nAnswer: The minimum monthly income is \u20b925,000, and the age must be between 21 and 60 years.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.11621893445650737
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 200,
        "candidates_token_count": 48,
        "total_token_count": 248
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:32:01,751 - INFO - Final extracted text: Question: What are the minimum income and age requirements for a personal loan applicant?
Answer: The minimum monthly income is ₹25,000, and the age must be between 21 and 60 years.

2025-04-10 20:32:01,751 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:32:01,754 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:32:02,359 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What is the resolution timeline for ATM transaction disputes?\nAnswer: Disputes must be resolved within 7 working days.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.017612735812480632
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 218,
        "candidates_token_count": 26,
        "total_token_count": 244
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:32:02,359 - INFO - Final extracted text: Question: What is the resolution timeline for ATM transaction disputes?
Answer: Disputes must be resolved within 7 working days.

2025-04-10 20:32:02,360 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:32:02,364 - INFO - Generated 6 QA pairs
2025-04-10 20:32:02,365 - INFO - Creating test suite...
2025-04-10 20:32:02,366 - INFO - Test suite created with ID: 67f7dd6a16d6e3cfc8cbba22
2025-04-10 20:32:02,366 - INFO - Running evaluation with Gemini 1.5 Flash...
2025-04-10 20:32:02,372 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:32:02,376 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:32:02,379 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:32:02,381 - INFO - Use pytorch device_name: cuda
2025-04-10 20:32:02,381 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:32:05,180 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:32:05,202 - INFO - Calling generate_answers method
2025-04-10 20:32:05,202 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?

Context: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources. Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:32:07,232 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources.  Instead of relying solely on the model's internal knowledge (which may be outdated or incomplete), RAG first retrieves relevant information from a knowledge base, allowing the generative model to produce more accurate and informative responses.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.036585485018216644
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 304,
        "candidates_token_count": 65,
        "total_token_count": 369
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:32:08,833 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:32:08,835 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:32:08,836 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:32:08,839 - INFO - Use pytorch device_name: cuda
2025-04-10 20:32:08,839 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:32:11,348 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:32:11,358 - INFO - Calling generate_answers method
2025-04-10 20:32:11,358 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What are vector databases and what types of data do they handle?

Context: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector. Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 20:32:12,300 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the provided text, vector databases are specialized database systems that store and efficiently query high-dimensional vector embeddings.  These embeddings are numerical representations of semantic information from data such as text and images, capturing their meaning and relationships.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.054276765661036716
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 298,
        "candidates_token_count": 47,
        "total_token_count": 345
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:32:12,310 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:32:12,315 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:32:12,316 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:32:12,319 - INFO - Use pytorch device_name: cuda
2025-04-10 20:32:12,319 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:32:14,810 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:32:14,818 - INFO - Calling generate_answers method
2025-04-10 20:32:14,818 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems, and what aspects of the system do they assess?

Context: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources. Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:32:17,427 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Evaluation metrics for RAG systems fall into three categories:\n\n1. **Retrieval-focused metrics:** These assess the effectiveness of the retrieval component.  Examples include precision, recall, and mean reciprocal rank (MRR), all measuring how well the system retrieves relevant documents.\n\n2. **Generation-focused metrics:** These evaluate the quality of the text generated by the model. Examples include BLEU, ROUGE, and METEOR, which compare the generated text to reference answers.\n\n3. **RAG-specific metrics:** These focus on the interplay between retrieval and generation.  Faithfulness measures how well the generated response uses the retrieved information, while relevance assesses how well the generated response addresses the original query.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.10176591470207967
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 311,
        "candidates_token_count": 142,
        "total_token_count": 453
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:32:17,445 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:32:17,448 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:32:17,449 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:32:17,451 - INFO - Use pytorch device_name: cuda
2025-04-10 20:32:17,451 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:32:20,105 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:32:20,113 - INFO - Calling generate_answers method
2025-04-10 20:32:20,113 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What documents are required for customer identification when opening a savings account?

Context: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions. Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:32:22,052 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the \"Standard Operating Procedure for Opening a Savings Account\" document, the required documents for customer identification are a valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID) and a name and address proof.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.038814994196097054
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 560,
        "candidates_token_count": 48,
        "total_token_count": 608
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:32:22,059 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:32:22,061 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:32:22,062 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:32:22,064 - INFO - Use pytorch device_name: cuda
2025-04-10 20:32:22,064 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:32:24,586 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:32:24,596 - INFO - Calling generate_answers method
2025-04-10 20:32:24,596 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What are the minimum income and age requirements for a personal loan applicant?

Context: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions. Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:32:26,601 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the provided text from \"Personal Loan Disbursement Guidelines (Retail Banking Division),\" the minimum monthly income requirement for a personal loan applicant is \u20b925,000, and the age limit is between 21 and 60 years.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.04931076067798543
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 561,
        "candidates_token_count": 53,
        "total_token_count": 614
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:32:26,609 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:32:26,613 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:32:26,614 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:32:26,616 - INFO - Use pytorch device_name: cuda
2025-04-10 20:32:26,616 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:32:29,421 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:32:29,431 - INFO - Calling generate_answers method
2025-04-10 20:32:29,431 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What is the resolution timeline for ATM transaction disputes?

Context: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence. Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 20:32:30,177 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the provided text from the \"Procedure for Handling ATM Disputes (Customer Service Manual),\" ATM transaction disputes must be resolved within **7 working days**.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.03533016481707173
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 557,
        "candidates_token_count": 31,
        "total_token_count": 588
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:32:30,193 - INFO - Evaluation completed with 6 results
2025-04-10 20:32:30,199 - INFO - Generated metrics reports: reports/rag_evaluation_report_20250410_203230.html
2025-04-10 20:32:30,199 - INFO - Generated metrics report at: {'html': 'reports/rag_evaluation_report_20250410_203230.html'}
2025-04-10 20:32:34,462 - INFO - Cleaning up ChromaDB collection...
2025-04-10 20:32:34,462 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:32:34,465 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:32:34,466 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:32:34,469 - INFO - Use pytorch device_name: cuda
2025-04-10 20:32:34,469 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:32:37,390 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:32:37,390 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:32:37,392 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:32:37,393 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:32:37,427 - INFO - Successfully cleaned up eval_docs collection.
2025-04-10 20:32:37,427 - INFO - ChromaDB cleanup completed.
2025-04-10 20:33:24,484 - INFO - Note: NumExpr detected 24 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 16.
2025-04-10 20:33:24,484 - INFO - NumExpr defaulting to 16 threads.
2025-04-10 20:33:24,624 - INFO - PyTorch version 2.3.1 available.
2025-04-10 20:33:25,843 - INFO - Setting up database connection...
2025-04-10 20:33:25,843 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:33:30,855 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7ddbd3124a31747f0dbcb, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 20:33:30,856 - INFO - Using JSON file database at: ./json_db
2025-04-10 20:33:30,859 - INFO - Loading data from sample_data.csv...
2025-04-10 20:33:30,861 - INFO - Loaded 6 chunks from CSV file: sample_data.csv using utf-8 encoding
2025-04-10 20:33:30,863 - INFO - Dataset stored with ID: 67f7ddc23124a31747f0dbcc
2025-04-10 20:33:30,863 - INFO - Adding chunks to vector store...
2025-04-10 20:33:30,863 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:33:35,875 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7ddc23124a31747f0dbcd, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 20:33:35,875 - INFO - Using JSON file database at: ./json_db
2025-04-10 20:33:35,879 - INFO - Use pytorch device_name: cuda
2025-04-10 20:33:35,879 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:33:38,534 - INFO - Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
2025-04-10 20:33:38,587 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:33:38,975 - INFO - Chunks successfully added to vector store
2025-04-10 20:33:38,975 - INFO - Generating synthetic QA pairs using Gemini 1.5 Flash...
2025-04-10 20:33:38,975 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 20:33:40,288 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?\nAnswer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, retrieved by a retrieval component before a generative model produces a response, leading to more accurate and informative outputs.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.10100160626804128
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 68,
        "total_token_count": 187
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:33:40,288 - INFO - Final extracted text: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?
Answer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, retrieved by a retrieval component before a generative model produces a response, leading to more accurate and informative outputs.

2025-04-10 20:33:40,288 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:33:40,288 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:33:41,098 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are vector databases and what are some examples?\nAnswer: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings, representing semantic information in numerical format.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.10972011695473881
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 59,
        "total_token_count": 178
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:33:41,098 - INFO - Final extracted text: Question: What are vector databases and what are some examples?
Answer: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings, representing semantic information in numerical format.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.

2025-04-10 20:33:41,098 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:33:41,098 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query.
2025-04-10 20:33:42,420 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What types of evaluation metrics are used for Retrieval Augmented Generation (RAG) systems?\nAnswer: RAG systems use retrieval-focused metrics (like precision, recall, and MRR) to assess document retrieval and generation-focused metrics (like BLEU, ROUGE, and METEOR) to evaluate the generated text quality.  Additionally, RAG-specific metrics such as faithfulness and relevance are used.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.10584802162356494
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 126,
        "candidates_token_count": 82,
        "total_token_count": 208
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:33:42,421 - INFO - Final extracted text: Question: What types of evaluation metrics are used for Retrieval Augmented Generation (RAG) systems?
Answer: RAG systems use retrieval-focused metrics (like precision, recall, and MRR) to assess document retrieval and generation-focused metrics (like BLEU, ROUGE, and METEOR) to evaluate the generated text quality.  Additionally, RAG-specific metrics such as faithfulness and relevance are used.

2025-04-10 20:33:42,421 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:33:42,421 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made.
2025-04-10 20:33:43,100 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What documents are required for customer identification when opening a savings account?\nAnswer: A valid government-issued ID such as Aadhaar, PAN, Passport, or Voter ID is required.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.02699266970157623
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 208,
        "candidates_token_count": 40,
        "total_token_count": 248
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:33:43,101 - INFO - Final extracted text: Question: What documents are required for customer identification when opening a savings account?
Answer: A valid government-issued ID such as Aadhaar, PAN, Passport, or Voter ID is required.

2025-04-10 20:33:43,101 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:33:43,101 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 20:33:44,306 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are the minimum income and age requirements for a personal loan applicant?\nAnswer: Salaried individuals must have a minimum monthly income of \u20b925,000 and be between 21 and 60 years old.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.07602477550506592
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 200,
        "candidates_token_count": 50,
        "total_token_count": 250
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:33:44,307 - INFO - Final extracted text: Question: What are the minimum income and age requirements for a personal loan applicant?
Answer: Salaried individuals must have a minimum monthly income of ₹25,000 and be between 21 and 60 years old.

2025-04-10 20:33:44,307 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:33:44,307 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:33:44,915 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What is the resolution timeline for ATM transaction disputes?\nAnswer: Disputes must be resolved within 7 working days.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.01785272015975072
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 218,
        "candidates_token_count": 26,
        "total_token_count": 244
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:33:44,915 - INFO - Final extracted text: Question: What is the resolution timeline for ATM transaction disputes?
Answer: Disputes must be resolved within 7 working days.

2025-04-10 20:33:44,915 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:33:44,916 - INFO - Generated 6 QA pairs
2025-04-10 20:33:44,916 - INFO - Creating test suite...
2025-04-10 20:33:44,917 - INFO - Test suite created with ID: 67f7ddd03124a31747f0dbd4
2025-04-10 20:33:44,917 - INFO - Running evaluation with Gemini 1.5 Flash...
2025-04-10 20:33:44,919 - INFO - Evaluation completed with 0 results
2025-04-10 20:33:44,919 - ERROR - Error generating metrics report: 'bleu'
2025-04-10 20:33:44,920 - INFO - Generated metrics report at: None
2025-04-10 20:36:39,176 - INFO - Cleaning up ChromaDB collection...
2025-04-10 20:36:39,176 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:36:44,190 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7de7f3124a31747f0dbd6, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 20:36:44,190 - INFO - Using JSON file database at: ./json_db
2025-04-10 20:36:44,196 - INFO - Use pytorch device_name: cuda
2025-04-10 20:36:44,196 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:36:47,186 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:36:47,187 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:36:52,197 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7de873124a31747f0dbd7, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 20:36:52,197 - INFO - Using JSON file database at: ./json_db
2025-04-10 20:36:52,230 - INFO - Successfully cleaned up eval_docs collection.
2025-04-10 20:36:52,230 - INFO - ChromaDB cleanup completed.
2025-04-10 20:36:58,564 - INFO - Note: NumExpr detected 24 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 16.
2025-04-10 20:36:58,564 - INFO - NumExpr defaulting to 16 threads.
2025-04-10 20:36:58,704 - INFO - PyTorch version 2.3.1 available.
2025-04-10 20:37:00,022 - INFO - Setting up database connection...
2025-04-10 20:37:00,022 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:37:05,033 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7de942004fdec43a1ecd8, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 20:37:05,033 - INFO - Using JSON file database at: ./json_db
2025-04-10 20:37:05,036 - INFO - Loading data from sample_data.csv...
2025-04-10 20:37:05,037 - INFO - Loaded 6 chunks from CSV file: sample_data.csv using utf-8 encoding
2025-04-10 20:37:05,039 - INFO - Dataset stored with ID: 67f7de992004fdec43a1ecd9
2025-04-10 20:37:05,039 - INFO - Adding chunks to vector store...
2025-04-10 20:37:05,039 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:37:10,052 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7de992004fdec43a1ecda, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 20:37:10,053 - INFO - Using JSON file database at: ./json_db
2025-04-10 20:37:10,056 - INFO - Use pytorch device_name: cuda
2025-04-10 20:37:10,056 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:37:12,736 - INFO - Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
2025-04-10 20:37:12,788 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:37:13,172 - INFO - Chunks successfully added to vector store
2025-04-10 20:37:13,172 - INFO - Generating synthetic QA pairs using Gemini 1.5 Flash...
2025-04-10 20:37:13,173 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 20:37:14,075 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?\nAnswer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, thus addressing limitations and producing more accurate and informative responses.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.025212203634196316
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 58,
        "total_token_count": 177
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:37:14,075 - INFO - Final extracted text: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?
Answer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, thus addressing limitations and producing more accurate and informative responses.

2025-04-10 20:37:14,076 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:37:14,076 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:37:15,152 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are vector databases and what types of data do they handle?\nAnswer: Vector databases are specialized database systems that store and efficiently query high-dimensional vector embeddings representing the semantic information of text, images, or other data types in a numerical format.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.09818681680931235
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 53,
        "total_token_count": 172
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:37:15,152 - INFO - Final extracted text: Question: What are vector databases and what types of data do they handle?
Answer: Vector databases are specialized database systems that store and efficiently query high-dimensional vector embeddings representing the semantic information of text, images, or other data types in a numerical format.

2025-04-10 20:37:15,152 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:37:15,152 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query.
2025-04-10 20:37:16,213 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems?\nAnswer: RAG systems are evaluated using retrieval-focused metrics (like precision, recall, and MRR) which assess document retrieval, and generation-focused metrics (like BLEU, ROUGE, and METEOR) which assess the quality of the generated text.  Additionally, RAG-specific metrics such as faithfulness and relevance are used.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.04803978163620521
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 126,
        "candidates_token_count": 87,
        "total_token_count": 213
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:37:16,213 - INFO - Final extracted text: Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems?
Answer: RAG systems are evaluated using retrieval-focused metrics (like precision, recall, and MRR) which assess document retrieval, and generation-focused metrics (like BLEU, ROUGE, and METEOR) which assess the quality of the generated text.  Additionally, RAG-specific metrics such as faithfulness and relevance are used.

2025-04-10 20:37:16,213 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:37:16,213 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made.
2025-04-10 20:37:17,289 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are the steps involved in opening a savings account according to this Standard Operating Procedure?\nAnswer: The steps are Customer Identification (collecting and verifying ID), KYC Compliance (filling and verifying the KYC form), Customer Due Diligence (normal or enhanced depending on risk), Account Creation (entering details in the CBS and assigning a Customer ID), and Welcome Kit & Activation (providing account materials and activating the account upon initial deposit).\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.07673583085509553
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 208,
        "candidates_token_count": 87,
        "total_token_count": 295
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:37:17,289 - INFO - Final extracted text: Question: What are the steps involved in opening a savings account according to this Standard Operating Procedure?
Answer: The steps are Customer Identification (collecting and verifying ID), KYC Compliance (filling and verifying the KYC form), Customer Due Diligence (normal or enhanced depending on risk), Account Creation (entering details in the CBS and assigning a Customer ID), and Welcome Kit & Activation (providing account materials and activating the account upon initial deposit).

2025-04-10 20:37:17,289 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:37:17,290 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 20:37:18,024 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are the minimum income requirements for salaried individuals applying for a personal loan?\nAnswer: Salaried individuals must have a minimum monthly income of \u20b925,000.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.04770052738678761
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 200,
        "candidates_token_count": 39,
        "total_token_count": 239
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:37:18,024 - INFO - Final extracted text: Question: What are the minimum income requirements for salaried individuals applying for a personal loan?
Answer: Salaried individuals must have a minimum monthly income of ₹25,000.

2025-04-10 20:37:18,024 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:37:18,025 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:37:19,087 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What is the resolution timeline for ATM dispute resolution?\nAnswer: Disputes must be resolved within 7 working days.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.0631935871564425
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 218,
        "candidates_token_count": 26,
        "total_token_count": 244
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:37:19,087 - INFO - Final extracted text: Question: What is the resolution timeline for ATM dispute resolution?
Answer: Disputes must be resolved within 7 working days.

2025-04-10 20:37:19,087 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:37:19,088 - INFO - Generated 6 QA pairs
2025-04-10 20:37:19,088 - INFO - Creating test suite...
2025-04-10 20:37:19,088 - INFO - Test suite created with ID: 67f7dea72004fdec43a1ece1
2025-04-10 20:37:19,088 - INFO - Running evaluation with Gemini 1.5 Flash...
2025-04-10 20:37:19,090 - INFO - Evaluation completed with 0 results
2025-04-10 20:37:19,090 - ERROR - Error generating metrics report: 'bleu'
2025-04-10 20:37:19,090 - INFO - Generated metrics report at: None
2025-04-10 20:41:46,490 - INFO - Note: NumExpr detected 24 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 16.
2025-04-10 20:41:46,490 - INFO - NumExpr defaulting to 16 threads.
2025-04-10 20:41:46,622 - INFO - PyTorch version 2.3.1 available.
2025-04-10 20:41:47,992 - INFO - Setting up database connection...
2025-04-10 20:41:47,992 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:41:53,005 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7dfb332418488f2d50226, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 20:41:53,006 - INFO - Using JSON file database at: ./json_db
2025-04-10 20:41:53,009 - INFO - Loading data from sample_data.csv...
2025-04-10 20:41:53,011 - INFO - Loaded 6 chunks from CSV file: sample_data.csv using utf-8 encoding
2025-04-10 20:41:53,012 - INFO - Dataset stored with ID: 67f7dfb932418488f2d50227
2025-04-10 20:41:53,012 - INFO - Adding chunks to vector store...
2025-04-10 20:41:53,012 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:41:58,024 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7dfb932418488f2d50228, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 20:41:58,025 - INFO - Using JSON file database at: ./json_db
2025-04-10 20:41:58,028 - INFO - Use pytorch device_name: cuda
2025-04-10 20:41:58,028 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:42:01,181 - INFO - Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
2025-04-10 20:42:01,234 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:42:01,602 - WARNING - Add of existing embedding ID: 0
2025-04-10 20:42:01,602 - WARNING - Add of existing embedding ID: 1
2025-04-10 20:42:01,602 - WARNING - Add of existing embedding ID: 2
2025-04-10 20:42:01,602 - WARNING - Add of existing embedding ID: 3
2025-04-10 20:42:01,602 - WARNING - Add of existing embedding ID: 4
2025-04-10 20:42:01,602 - WARNING - Add of existing embedding ID: 5
2025-04-10 20:42:01,603 - WARNING - Insert of existing embedding ID: 0
2025-04-10 20:42:01,603 - WARNING - Insert of existing embedding ID: 1
2025-04-10 20:42:01,603 - WARNING - Insert of existing embedding ID: 2
2025-04-10 20:42:01,603 - WARNING - Insert of existing embedding ID: 3
2025-04-10 20:42:01,603 - WARNING - Insert of existing embedding ID: 4
2025-04-10 20:42:01,603 - WARNING - Insert of existing embedding ID: 5
2025-04-10 20:42:01,607 - INFO - Chunks successfully added to vector store
2025-04-10 20:42:01,607 - INFO - Generating synthetic QA pairs using Gemini 1.5 Flash...
2025-04-10 20:42:01,607 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 20:42:03,711 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?\nAnswer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, addressing limitations by using a retrieval component to fetch relevant information before generation.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.06586312465980405
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 61,
        "total_token_count": 180
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:42:03,712 - INFO - Final extracted text: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?
Answer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, addressing limitations by using a retrieval component to fetch relevant information before generation.

2025-04-10 20:42:03,712 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:42:03,712 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:42:04,499 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are vector databases and what are some examples?\nAnswer: Vector databases are specialized database systems that store and efficiently query high-dimensional vector embeddings representing semantic information.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.04062081266332556
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 54,
        "total_token_count": 173
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:42:04,499 - INFO - Final extracted text: Question: What are vector databases and what are some examples?
Answer: Vector databases are specialized database systems that store and efficiently query high-dimensional vector embeddings representing semantic information.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.

2025-04-10 20:42:04,500 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:42:04,500 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query.
2025-04-10 20:42:05,994 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems, and what aspects of the system do they assess?\nAnswer: RAG systems are evaluated using retrieval-focused metrics (precision, recall, MRR) which assess the relevance of retrieved documents, and generation-focused metrics (BLEU, ROUGE, METEOR) which evaluate the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance measure how well the generated response uses the retrieved information and answers the query.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.03760641311930719
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 126,
        "candidates_token_count": 107,
        "total_token_count": 233
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:42:05,995 - INFO - Final extracted text: Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems, and what aspects of the system do they assess?
Answer: RAG systems are evaluated using retrieval-focused metrics (precision, recall, MRR) which assess the relevance of retrieved documents, and generation-focused metrics (BLEU, ROUGE, METEOR) which evaluate the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance measure how well the generated response uses the retrieved information and answers the query.

2025-04-10 20:42:05,995 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:42:05,995 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made.
2025-04-10 20:42:06,732 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What documents are required for customer identification when opening a savings account?\nAnswer: Valid government-issued ID such as Aadhaar, PAN, Passport, or Voter ID are required.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.07974578784062313
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 208,
        "candidates_token_count": 39,
        "total_token_count": 247
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:42:06,732 - INFO - Final extracted text: Question: What documents are required for customer identification when opening a savings account?
Answer: Valid government-issued ID such as Aadhaar, PAN, Passport, or Voter ID are required.

2025-04-10 20:42:06,741 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:42:06,741 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 20:42:08,000 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are the eligibility requirements for a personal loan under these guidelines?\nAnswer: Salaried individuals must have a minimum monthly income of \u20b925,000, be between 21 and 60 years old, and have a credit score above 700.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.036657567818959555
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 200,
        "candidates_token_count": 60,
        "total_token_count": 260
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:42:08,000 - INFO - Final extracted text: Question: What are the eligibility requirements for a personal loan under these guidelines?
Answer: Salaried individuals must have a minimum monthly income of ₹25,000, be between 21 and 60 years old, and have a credit score above 700.

2025-04-10 20:42:08,001 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:42:08,001 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:42:08,626 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What is the resolution timeline for ATM transaction disputes?\nAnswer: Disputes must be resolved within 7 working days.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.016663866547437813
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 218,
        "candidates_token_count": 26,
        "total_token_count": 244
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:42:08,626 - INFO - Final extracted text: Question: What is the resolution timeline for ATM transaction disputes?
Answer: Disputes must be resolved within 7 working days.

2025-04-10 20:42:08,626 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:42:08,628 - INFO - Generated 6 QA pairs
2025-04-10 20:42:08,628 - INFO - Creating test suite...
2025-04-10 20:42:08,628 - ERROR - Error creating test suite: name 'uuid' is not defined
2025-04-10 20:42:08,628 - ERROR - Error in main: name 'uuid' is not defined
2025-04-10 20:43:09,742 - INFO - Note: NumExpr detected 24 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 16.
2025-04-10 20:43:09,742 - INFO - NumExpr defaulting to 16 threads.
2025-04-10 20:43:09,879 - INFO - PyTorch version 2.3.1 available.
2025-04-10 20:43:11,112 - INFO - Setting up database connection...
2025-04-10 20:43:11,112 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:43:11,116 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:43:11,117 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:43:11,118 - INFO - Loading data from sample_data.csv...
2025-04-10 20:43:11,120 - INFO - Loaded 6 chunks from CSV file: sample_data.csv using utf-8 encoding
2025-04-10 20:43:11,122 - INFO - Dataset stored with ID: 67f7e007fd5f1cff09c07d50
2025-04-10 20:43:11,122 - INFO - Adding chunks to vector store...
2025-04-10 20:43:11,122 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:43:11,124 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:43:11,125 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:43:11,128 - INFO - Use pytorch device_name: cuda
2025-04-10 20:43:11,128 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:43:13,836 - INFO - Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
2025-04-10 20:43:13,892 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:43:14,301 - WARNING - Add of existing embedding ID: 0
2025-04-10 20:43:14,301 - WARNING - Add of existing embedding ID: 1
2025-04-10 20:43:14,301 - WARNING - Add of existing embedding ID: 2
2025-04-10 20:43:14,301 - WARNING - Add of existing embedding ID: 3
2025-04-10 20:43:14,301 - WARNING - Add of existing embedding ID: 4
2025-04-10 20:43:14,301 - WARNING - Add of existing embedding ID: 5
2025-04-10 20:43:14,302 - WARNING - Insert of existing embedding ID: 0
2025-04-10 20:43:14,302 - WARNING - Insert of existing embedding ID: 1
2025-04-10 20:43:14,303 - WARNING - Insert of existing embedding ID: 2
2025-04-10 20:43:14,303 - WARNING - Insert of existing embedding ID: 3
2025-04-10 20:43:14,303 - WARNING - Insert of existing embedding ID: 4
2025-04-10 20:43:14,303 - WARNING - Insert of existing embedding ID: 5
2025-04-10 20:43:14,303 - WARNING - Add of existing embedding ID: 0
2025-04-10 20:43:14,303 - WARNING - Add of existing embedding ID: 1
2025-04-10 20:43:14,303 - WARNING - Add of existing embedding ID: 2
2025-04-10 20:43:14,303 - WARNING - Add of existing embedding ID: 3
2025-04-10 20:43:14,303 - WARNING - Add of existing embedding ID: 4
2025-04-10 20:43:14,303 - WARNING - Add of existing embedding ID: 5
2025-04-10 20:43:14,307 - INFO - Chunks successfully added to vector store
2025-04-10 20:43:14,307 - INFO - Generating synthetic QA pairs using Gemini 1.5 Flash...
2025-04-10 20:43:14,310 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 20:43:16,475 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?\nAnswer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, retrieved from a knowledge base, which helps produce more accurate and informative responses.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.16971698884041078
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 62,
        "total_token_count": 181
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:43:16,476 - INFO - Final extracted text: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?
Answer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, retrieved from a knowledge base, which helps produce more accurate and informative responses.

2025-04-10 20:43:16,476 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:43:16,479 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:43:17,286 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are vector databases and what are some examples?\nAnswer: Vector databases are specialized systems for storing and efficiently querying high-dimensional vector embeddings, representing semantic information numerically.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.09659674384377219
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 55,
        "total_token_count": 174
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:43:17,287 - INFO - Final extracted text: Question: What are vector databases and what are some examples?
Answer: Vector databases are specialized systems for storing and efficiently querying high-dimensional vector embeddings, representing semantic information numerically.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.

2025-04-10 20:43:17,287 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:43:17,289 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query.
2025-04-10 20:43:18,736 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems?\nAnswer: RAG systems are evaluated using retrieval-focused metrics (e.g., precision, recall, MRR) which assess document retrieval, and generation-focused metrics (e.g., BLEU, ROUGE, METEOR) which assess the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance are used to measure how well the generated response uses the retrieved information and answers the query.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.04189326422555106
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 126,
        "candidates_token_count": 105,
        "total_token_count": 231
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:43:18,737 - INFO - Final extracted text: Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems?
Answer: RAG systems are evaluated using retrieval-focused metrics (e.g., precision, recall, MRR) which assess document retrieval, and generation-focused metrics (e.g., BLEU, ROUGE, METEOR) which assess the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance are used to measure how well the generated response uses the retrieved information and answers the query.

2025-04-10 20:43:18,737 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:43:18,739 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made.
2025-04-10 20:43:19,779 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are the steps involved in opening a savings account according to this Standard Operating Procedure?\nAnswer: The steps are: Customer Identification (collecting and verifying ID), KYC Compliance (filling and cross-checking the KYC form), Customer Due Diligence (normal or escalated based on risk), Account Creation (entering details in CBS and assigning a Customer ID), and Welcome Kit & Activation (providing account materials and activating upon initial deposit).\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.09061623167717593
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 208,
        "candidates_token_count": 87,
        "total_token_count": 295
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:43:19,779 - INFO - Final extracted text: Question: What are the steps involved in opening a savings account according to this Standard Operating Procedure?
Answer: The steps are: Customer Identification (collecting and verifying ID), KYC Compliance (filling and cross-checking the KYC form), Customer Due Diligence (normal or escalated based on risk), Account Creation (entering details in CBS and assigning a Customer ID), and Welcome Kit & Activation (providing account materials and activating upon initial deposit).

2025-04-10 20:43:19,788 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:43:19,791 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 20:43:20,650 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are the minimum income and age requirements for a personal loan applicant?\nAnswer: The minimum monthly income is \u20b925,000, and the applicant must be between 21 and 60 years old.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.1094424481294593
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 200,
        "candidates_token_count": 49,
        "total_token_count": 249
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:43:20,650 - INFO - Final extracted text: Question: What are the minimum income and age requirements for a personal loan applicant?
Answer: The minimum monthly income is ₹25,000, and the applicant must be between 21 and 60 years old.

2025-04-10 20:43:20,650 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:43:20,652 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:43:21,547 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What is the resolution timeline for ATM transaction disputes?\nAnswer: Disputes must be resolved within 7 working days.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.01665562391281128
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 218,
        "candidates_token_count": 26,
        "total_token_count": 244
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:43:21,547 - INFO - Final extracted text: Question: What is the resolution timeline for ATM transaction disputes?
Answer: Disputes must be resolved within 7 working days.

2025-04-10 20:43:21,548 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:43:21,555 - INFO - Generated 6 QA pairs
2025-04-10 20:43:21,555 - INFO - Creating test suite...
2025-04-10 20:43:21,555 - ERROR - Error creating test suite: name 'uuid' is not defined
2025-04-10 20:43:21,555 - ERROR - Error in main: name 'uuid' is not defined
2025-04-10 20:44:22,398 - INFO - Note: NumExpr detected 24 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 16.
2025-04-10 20:44:22,398 - INFO - NumExpr defaulting to 16 threads.
2025-04-10 20:44:22,539 - INFO - PyTorch version 2.3.1 available.
2025-04-10 20:44:24,076 - INFO - Setting up database connection...
2025-04-10 20:44:24,076 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:44:24,079 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:44:24,081 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:44:24,081 - INFO - Loading data from sample_data.csv...
2025-04-10 20:44:24,083 - INFO - Loaded 6 chunks from CSV file: sample_data.csv using utf-8 encoding
2025-04-10 20:44:24,084 - INFO - Dataset stored with ID: 67f7e0505a4e9aa2cbd2d086
2025-04-10 20:44:24,084 - INFO - Adding chunks to vector store...
2025-04-10 20:44:24,084 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:44:24,086 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:44:24,087 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:44:24,090 - INFO - Use pytorch device_name: cuda
2025-04-10 20:44:24,090 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:44:26,728 - INFO - Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
2025-04-10 20:44:26,782 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:44:27,173 - WARNING - Add of existing embedding ID: 0
2025-04-10 20:44:27,173 - WARNING - Add of existing embedding ID: 1
2025-04-10 20:44:27,173 - WARNING - Add of existing embedding ID: 2
2025-04-10 20:44:27,173 - WARNING - Add of existing embedding ID: 3
2025-04-10 20:44:27,173 - WARNING - Add of existing embedding ID: 4
2025-04-10 20:44:27,173 - WARNING - Add of existing embedding ID: 5
2025-04-10 20:44:27,173 - WARNING - Add of existing embedding ID: 0
2025-04-10 20:44:27,173 - WARNING - Add of existing embedding ID: 1
2025-04-10 20:44:27,173 - WARNING - Add of existing embedding ID: 2
2025-04-10 20:44:27,173 - WARNING - Add of existing embedding ID: 3
2025-04-10 20:44:27,173 - WARNING - Add of existing embedding ID: 4
2025-04-10 20:44:27,173 - WARNING - Add of existing embedding ID: 5
2025-04-10 20:44:27,174 - WARNING - Insert of existing embedding ID: 0
2025-04-10 20:44:27,174 - WARNING - Insert of existing embedding ID: 1
2025-04-10 20:44:27,174 - WARNING - Insert of existing embedding ID: 2
2025-04-10 20:44:27,175 - WARNING - Insert of existing embedding ID: 3
2025-04-10 20:44:27,175 - WARNING - Insert of existing embedding ID: 4
2025-04-10 20:44:27,175 - WARNING - Insert of existing embedding ID: 5
2025-04-10 20:44:27,175 - WARNING - Add of existing embedding ID: 0
2025-04-10 20:44:27,175 - WARNING - Add of existing embedding ID: 1
2025-04-10 20:44:27,175 - WARNING - Add of existing embedding ID: 2
2025-04-10 20:44:27,175 - WARNING - Add of existing embedding ID: 3
2025-04-10 20:44:27,175 - WARNING - Add of existing embedding ID: 4
2025-04-10 20:44:27,175 - WARNING - Add of existing embedding ID: 5
2025-04-10 20:44:27,186 - INFO - Chunks successfully added to vector store
2025-04-10 20:44:27,186 - INFO - Generating synthetic QA pairs using Gemini 1.5 Flash...
2025-04-10 20:44:27,189 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 20:44:29,334 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?\nAnswer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, thus addressing limitations and producing more accurate and informative responses.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.024584577001374345
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 58,
        "total_token_count": 177
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:44:29,334 - INFO - Final extracted text: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?
Answer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, thus addressing limitations and producing more accurate and informative responses.

2025-04-10 20:44:29,335 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:44:29,337 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:44:30,193 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are vector databases and what are some examples?\nAnswer: Vector databases are specialized database systems that store and efficiently query high-dimensional vector embeddings, representing semantic information numerically.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.04464503696986607
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 56,
        "total_token_count": 175
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:44:30,193 - INFO - Final extracted text: Question: What are vector databases and what are some examples?
Answer: Vector databases are specialized database systems that store and efficiently query high-dimensional vector embeddings, representing semantic information numerically.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.

2025-04-10 20:44:30,193 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:44:30,195 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query.
2025-04-10 20:44:31,606 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems, and what aspects of the system do they assess?\nAnswer: RAG systems are evaluated using retrieval-focused metrics (like precision, recall, and MRR) which assess the relevance of retrieved documents, and generation-focused metrics (like BLEU, ROUGE, and METEOR) which assess the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance measure how well the generated response uses the retrieved information and answers the query.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.03083069474847467
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 126,
        "candidates_token_count": 111,
        "total_token_count": 237
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:44:31,607 - INFO - Final extracted text: Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems, and what aspects of the system do they assess?
Answer: RAG systems are evaluated using retrieval-focused metrics (like precision, recall, and MRR) which assess the relevance of retrieved documents, and generation-focused metrics (like BLEU, ROUGE, and METEOR) which assess the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance measure how well the generated response uses the retrieved information and answers the query.

2025-04-10 20:44:31,607 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:44:31,608 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made.
2025-04-10 20:44:32,348 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What documents are required for customer identification when opening a savings account?\nAnswer: Valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID) and address proof.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.07367008328437805
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 208,
        "candidates_token_count": 40,
        "total_token_count": 248
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:44:32,349 - INFO - Final extracted text: Question: What documents are required for customer identification when opening a savings account?
Answer: Valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID) and address proof.

2025-04-10 20:44:32,358 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:44:32,360 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 20:44:33,509 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are the minimum income and age requirements for a personal loan applicant under these guidelines?\nAnswer: The minimum monthly income is \u20b925,000, and the age limit is 21-60 years.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.11555788468341438
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 200,
        "candidates_token_count": 49,
        "total_token_count": 249
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:44:33,510 - INFO - Final extracted text: Question: What are the minimum income and age requirements for a personal loan applicant under these guidelines?
Answer: The minimum monthly income is ₹25,000, and the age limit is 21-60 years.

2025-04-10 20:44:33,510 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:44:33,511 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:44:34,151 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What is the resolution timeline for ATM transaction disputes?\nAnswer: Disputes must be resolved within 7 working days.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.014519003721383901
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 218,
        "candidates_token_count": 26,
        "total_token_count": 244
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:44:34,151 - INFO - Final extracted text: Question: What is the resolution timeline for ATM transaction disputes?
Answer: Disputes must be resolved within 7 working days.

2025-04-10 20:44:34,151 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:44:34,153 - INFO - Generated 6 QA pairs
2025-04-10 20:44:34,153 - INFO - Creating test suite...
2025-04-10 20:44:34,155 - INFO - Test suite created with ID: 67f7e05a5a4e9aa2cbd2d08f
2025-04-10 20:44:34,155 - INFO - Running evaluation with Gemini 1.5 Flash...
2025-04-10 20:44:34,166 - INFO - Collection 'db_path' created in MongoDB.
2025-04-10 20:44:34,166 - INFO - Automatically created collection 'db_path' on first access
2025-04-10 20:44:34,169 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:44:34,171 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:44:34,172 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:44:34,174 - INFO - Use pytorch device_name: cuda
2025-04-10 20:44:34,174 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:44:36,632 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:44:36,656 - INFO - Calling generate_answers method
2025-04-10 20:44:36,656 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?

Context: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources. Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:44:38,700 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources.  Instead of relying solely on the knowledge encoded within the model's parameters (which may be outdated or incomplete), RAG first retrieves relevant information from a knowledge base, allowing the generative model to produce more accurate and informative responses.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.07978879002963796
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 304,
        "candidates_token_count": 68,
        "total_token_count": 372
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:44:40,266 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:44:40,268 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:44:40,269 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:44:40,271 - INFO - Use pytorch device_name: cuda
2025-04-10 20:44:40,271 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:44:42,726 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:44:42,741 - INFO - Calling generate_answers method
2025-04-10 20:44:42,741 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What are vector databases and what are some examples?

Context: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector. Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 20:44:44,947 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings.  These embeddings represent the semantic information of data (like text or images) in a numerical format.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.  They are optimized for similarity search, such as finding the *k*-nearest neighbors (kNN) to a given query vector.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.09001761958712623
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 295,
        "candidates_token_count": 84,
        "total_token_count": 379
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:44:44,956 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:44:44,959 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:44:44,960 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:44:44,962 - INFO - Use pytorch device_name: cuda
2025-04-10 20:44:44,962 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:44:47,627 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:44:47,644 - INFO - Calling generate_answers method
2025-04-10 20:44:47,644 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems, and what aspects of the system do they assess?

Context: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources. Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:44:50,413 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Evaluation metrics for RAG systems fall into three categories:\n\n1. **Retrieval-focused metrics:** These assess the quality of the retrieved documents.  Examples include precision, recall, and mean reciprocal rank (MRR).  These metrics evaluate the relevance and ranking of retrieved information.\n\n2. **Generation-focused metrics:** These assess the quality of the generated text itself. Examples include BLEU, ROUGE, and METEOR. These metrics compare the generated text to one or more reference answers, evaluating aspects like fluency and accuracy.\n\n3. **RAG-specific metrics:** These evaluate the interaction between the retrieval and generation components.  Examples include faithfulness (how well the generated response reflects the retrieved information) and relevance (how well the generated response addresses the original query).  These metrics specifically address the unique characteristics of the RAG approach.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.12462990624564034
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 311,
        "candidates_token_count": 168,
        "total_token_count": 479
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:44:50,433 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:44:50,437 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:44:50,438 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:44:50,440 - INFO - Use pytorch device_name: cuda
2025-04-10 20:44:50,440 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:44:53,170 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:44:53,189 - INFO - Calling generate_answers method
2025-04-10 20:44:53,189 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What documents are required for customer identification when opening a savings account?

Context: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions. Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:44:54,076 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the \"Standard Operating Procedure for Opening a Savings Account\" document, the required documents for customer identification are a valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID) and a name and address proof.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.03879963358243307
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 560,
        "candidates_token_count": 48,
        "total_token_count": 608
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:44:54,084 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:44:54,086 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:44:54,087 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:44:54,090 - INFO - Use pytorch device_name: cuda
2025-04-10 20:44:54,090 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:44:57,501 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:44:57,517 - INFO - Calling generate_answers method
2025-04-10 20:44:57,517 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What are the minimum income and age requirements for a personal loan applicant under these guidelines?

Context: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions. Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:44:59,596 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the provided \"Personal Loan Disbursement Guidelines (Retail Banking Division)\" document, the minimum income requirement for a personal loan applicant is \u20b925,000 per month, and the age requirement is between 21 and 60 years.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.04072153568267822
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 564,
        "candidates_token_count": 54,
        "total_token_count": 618
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:44:59,602 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:44:59,607 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:44:59,608 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:44:59,610 - INFO - Use pytorch device_name: cuda
2025-04-10 20:44:59,610 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:45:02,138 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:45:02,153 - INFO - Calling generate_answers method
2025-04-10 20:45:02,153 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What is the resolution timeline for ATM transaction disputes?

Context: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence. Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 20:45:04,068 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the provided text from the \"Procedure for Handling ATM Disputes (Customer Service Manual)\", ATM transaction disputes must be resolved within **7 working days**.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.06142263258657148
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 557,
        "candidates_token_count": 31,
        "total_token_count": 588
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:45:04,091 - INFO - Evaluation completed with 6 results
2025-04-10 20:45:04,095 - INFO - Generated metrics reports: reports/rag_evaluation_report_20250410_204504.html
2025-04-10 20:45:04,095 - INFO - Generated metrics report at: {'html': 'reports/rag_evaluation_report_20250410_204504.html'}
2025-04-10 20:45:31,494 - INFO - Cleaning up ChromaDB collection...
2025-04-10 20:45:31,494 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:45:31,498 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:45:31,499 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:45:31,501 - INFO - Use pytorch device_name: cuda
2025-04-10 20:45:31,501 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:45:34,136 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:45:34,137 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:45:34,139 - INFO - Successfully connected to MongoDB at None
2025-04-10 20:45:34,140 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 20:45:34,175 - INFO - Successfully cleaned up eval_docs collection.
2025-04-10 20:45:34,175 - INFO - ChromaDB cleanup completed.
2025-04-10 20:48:17,895 - INFO - Note: NumExpr detected 24 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 16.
2025-04-10 20:48:17,895 - INFO - NumExpr defaulting to 16 threads.
2025-04-10 20:48:18,035 - INFO - PyTorch version 2.3.1 available.
2025-04-10 20:48:19,648 - INFO - Setting up database connection...
2025-04-10 20:48:19,649 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:48:24,660 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e13b30c10de47a0034a7, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 20:48:24,660 - INFO - Using JSON file database at: ./json_db
2025-04-10 20:48:24,663 - INFO - Loading data from sample_data.csv...
2025-04-10 20:48:24,665 - INFO - Loaded 6 chunks from CSV file: sample_data.csv using utf-8 encoding
2025-04-10 20:48:24,666 - INFO - Dataset stored with ID: 67f7e14030c10de47a0034a8
2025-04-10 20:48:24,666 - INFO - Adding chunks to vector store...
2025-04-10 20:48:24,666 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:48:29,679 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e14030c10de47a0034a9, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 20:48:29,679 - INFO - Using JSON file database at: ./json_db
2025-04-10 20:48:29,681 - INFO - Use pytorch device_name: cuda
2025-04-10 20:48:29,681 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:48:32,430 - INFO - Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
2025-04-10 20:48:32,482 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:48:32,891 - INFO - Chunks successfully added to vector store
2025-04-10 20:48:32,891 - INFO - Generating synthetic QA pairs using Gemini 1.5 Flash...
2025-04-10 20:48:32,891 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 20:48:34,938 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?\nAnswer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, thus addressing limitations and producing more accurate and informative responses.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.027771686685496365
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 58,
        "total_token_count": 177
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:48:34,938 - INFO - Final extracted text: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?
Answer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, thus addressing limitations and producing more accurate and informative responses.

2025-04-10 20:48:34,938 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:48:34,938 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 20:48:35,776 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are vector databases and what types of data do they handle?\nAnswer: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings representing semantic information about text, images, or other data.  They use these numerical representations to capture meaning and relationships between data points.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.10792836688813709
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 63,
        "total_token_count": 182
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:48:35,776 - INFO - Final extracted text: Question: What are vector databases and what types of data do they handle?
Answer: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings representing semantic information about text, images, or other data.  They use these numerical representations to capture meaning and relationships between data points.

2025-04-10 20:48:35,776 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:48:35,776 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query.
2025-04-10 20:48:37,106 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What types of evaluation metrics are used for Retrieval Augmented Generation (RAG) systems?\nAnswer: RAG systems use retrieval-focused metrics (precision, recall, MRR) to assess document retrieval and generation-focused metrics (BLEU, ROUGE, METEOR) to evaluate the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance are used to measure how well the generated response utilizes retrieved information and addresses the query.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.09719059031496766
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 126,
        "candidates_token_count": 93,
        "total_token_count": 219
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:48:37,106 - INFO - Final extracted text: Question: What types of evaluation metrics are used for Retrieval Augmented Generation (RAG) systems?
Answer: RAG systems use retrieval-focused metrics (precision, recall, MRR) to assess document retrieval and generation-focused metrics (BLEU, ROUGE, METEOR) to evaluate the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance are used to measure how well the generated response utilizes retrieved information and addresses the query.

2025-04-10 20:48:37,106 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:48:37,106 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made.
2025-04-10 20:48:37,809 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What documents are required for customer identification when opening a savings account?\nAnswer: Valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID) and address proof are required.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.08928568590255011
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 208,
        "candidates_token_count": 42,
        "total_token_count": 250
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:48:37,809 - INFO - Final extracted text: Question: What documents are required for customer identification when opening a savings account?
Answer: Valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID) and address proof are required.

2025-04-10 20:48:37,809 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:48:37,809 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 20:48:39,037 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are the minimum income requirements and age limits for salaried individuals applying for a personal loan?\nAnswer: Salaried individuals must have a minimum monthly income of \u20b925,000 and be between 21 and 60 years old.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.06410614649454753
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 200,
        "candidates_token_count": 54,
        "total_token_count": 254
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:48:39,037 - INFO - Final extracted text: Question: What are the minimum income requirements and age limits for salaried individuals applying for a personal loan?
Answer: Salaried individuals must have a minimum monthly income of ₹25,000 and be between 21 and 60 years old.

2025-04-10 20:48:39,037 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:48:39,037 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 20:48:39,653 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What is the resolution timeline for ATM transaction disputes?\nAnswer: Disputes must be resolved within 7 working days.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.016763926698611334
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 218,
        "candidates_token_count": 26,
        "total_token_count": 244
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 20:48:39,653 - INFO - Final extracted text: Question: What is the resolution timeline for ATM transaction disputes?
Answer: Disputes must be resolved within 7 working days.

2025-04-10 20:48:39,653 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 20:48:39,654 - INFO - Generated 6 QA pairs
2025-04-10 20:48:39,654 - INFO - Creating test suite...
2025-04-10 20:48:39,655 - INFO - Test suite created with ID: 67f7e14f30c10de47a0034b0
2025-04-10 20:48:39,655 - INFO - Running evaluation with Gemini 1.5 Flash...
2025-04-10 20:48:39,656 - INFO - Evaluation completed with 0 results
2025-04-10 20:48:39,656 - ERROR - Error generating metrics report: 'bleu'
2025-04-10 20:48:39,656 - INFO - Generated metrics report at: None
2025-04-10 20:48:49,190 - INFO - Cleaning up ChromaDB collection...
2025-04-10 20:48:49,190 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:48:54,200 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e15930c10de47a0034b2, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 20:48:54,200 - INFO - Using JSON file database at: ./json_db
2025-04-10 20:48:54,203 - INFO - Use pytorch device_name: cuda
2025-04-10 20:48:54,203 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 20:48:56,789 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 20:48:56,789 - INFO - Attempting to connect to MongoDB at None
2025-04-10 20:49:01,797 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e16030c10de47a0034b3, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 20:49:01,798 - INFO - Using JSON file database at: ./json_db
2025-04-10 20:49:01,831 - INFO - Successfully cleaned up eval_docs collection.
2025-04-10 20:49:01,832 - INFO - ChromaDB cleanup completed.
2025-04-10 21:07:21,400 - INFO - Note: NumExpr detected 24 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 16.
2025-04-10 21:07:21,401 - INFO - NumExpr defaulting to 16 threads.
2025-04-10 21:07:21,630 - INFO - PyTorch version 2.3.1 available.
2025-04-10 21:07:23,477 - INFO - Setting up database connection...
2025-04-10 21:07:23,477 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:07:28,490 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e5b3aba52edbe1e1d3cd, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 21:07:28,490 - INFO - Using JSON file database at: ./json_db
2025-04-10 21:07:28,510 - INFO - Loading data from sample_data.csv...
2025-04-10 21:07:28,517 - INFO - Loaded 6 chunks from CSV file: sample_data.csv using utf-8 encoding
2025-04-10 21:07:28,520 - INFO - Dataset stored with ID: 67f7e5b8aba52edbe1e1d3ce
2025-04-10 21:07:28,520 - INFO - Adding chunks to vector store...
2025-04-10 21:07:28,520 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:07:33,531 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e5b8aba52edbe1e1d3cf, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 21:07:33,532 - INFO - Using JSON file database at: ./json_db
2025-04-10 21:07:33,546 - INFO - Use pytorch device_name: cuda
2025-04-10 21:07:33,547 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:07:37,661 - INFO - Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
2025-04-10 21:07:37,734 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:07:38,624 - INFO - Chunks successfully added to vector store
2025-04-10 21:07:38,624 - INFO - Generating synthetic QA pairs using Gemini 1.5 Flash...
2025-04-10 21:07:38,624 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 21:07:40,729 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?\nAnswer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, thus addressing limitations and producing more accurate and informative responses.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.026922830219926506
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 58,
        "total_token_count": 177
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:07:40,730 - INFO - Final extracted text: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?
Answer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, thus addressing limitations and producing more accurate and informative responses.

2025-04-10 21:07:40,731 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 21:07:40,731 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 21:07:41,559 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are vector databases and what are some examples?\nAnswer: Vector databases are specialized database systems that store and efficiently query high-dimensional vector embeddings, representing semantic information numerically.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.046439562525068014
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 56,
        "total_token_count": 175
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:07:41,559 - INFO - Final extracted text: Question: What are vector databases and what are some examples?
Answer: Vector databases are specialized database systems that store and efficiently query high-dimensional vector embeddings, representing semantic information numerically.  Examples include Pinecone, Weaviate, Milvus, and ChromaDB.

2025-04-10 21:07:41,559 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 21:07:41,559 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query.
2025-04-10 21:07:42,907 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems?\nAnswer: RAG systems are evaluated using retrieval-focused metrics (e.g., precision, recall, MRR) which assess document retrieval, and generation-focused metrics (e.g., BLEU, ROUGE, METEOR) which assess the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance are used.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.02162582212024265
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 126,
        "candidates_token_count": 90,
        "total_token_count": 216
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:07:42,907 - INFO - Final extracted text: Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems?
Answer: RAG systems are evaluated using retrieval-focused metrics (e.g., precision, recall, MRR) which assess document retrieval, and generation-focused metrics (e.g., BLEU, ROUGE, METEOR) which assess the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance are used.

2025-04-10 21:07:42,907 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 21:07:42,907 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made.
2025-04-10 21:07:43,601 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What documents are required for customer identification when opening a savings account?\nAnswer: Valid government-issued ID such as Aadhaar, PAN, Passport, or Voter ID.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.0783380431097907
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 208,
        "candidates_token_count": 37,
        "total_token_count": 245
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:07:43,601 - INFO - Final extracted text: Question: What documents are required for customer identification when opening a savings account?
Answer: Valid government-issued ID such as Aadhaar, PAN, Passport, or Voter ID.

2025-04-10 21:07:43,602 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 21:07:43,602 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 21:07:44,835 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are the minimum eligibility requirements for a personal loan under these guidelines?\nAnswer:  A minimum monthly income of \u20b925,000, age between 21 and 60 years, and a credit score above 700.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.07188401655717329
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 200,
        "candidates_token_count": 55,
        "total_token_count": 255
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:07:44,835 - INFO - Final extracted text: Question: What are the minimum eligibility requirements for a personal loan under these guidelines?
Answer:  A minimum monthly income of ₹25,000, age between 21 and 60 years, and a credit score above 700.

2025-04-10 21:07:44,835 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 21:07:44,836 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 21:07:45,526 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What is the resolution timeline for ATM transaction disputes?\nAnswer: Disputes must be resolved within 7 working days.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.01522710919380188
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 218,
        "candidates_token_count": 26,
        "total_token_count": 244
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:07:45,527 - INFO - Final extracted text: Question: What is the resolution timeline for ATM transaction disputes?
Answer: Disputes must be resolved within 7 working days.

2025-04-10 21:07:45,527 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 21:07:45,538 - INFO - Generated 6 QA pairs
2025-04-10 21:07:45,538 - INFO - Creating test suite...
2025-04-10 21:07:45,539 - INFO - Test suite created with ID: 67f7e5c9aba52edbe1e1d3d6
2025-04-10 21:07:45,539 - INFO - Running evaluation with Gemini 1.5 Flash...
2025-04-10 21:07:45,539 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:07:50,553 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e5c9aba52edbe1e1d3d7, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 21:07:50,553 - INFO - Using JSON file database at: ./json_db
2025-04-10 21:07:50,556 - INFO - Use pytorch device_name: cuda
2025-04-10 21:07:50,556 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:07:53,103 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:07:53,140 - INFO - Calling generate_answers method
2025-04-10 21:07:53,140 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?

Context: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources. Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 21:07:54,081 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources.  Instead of relying solely on the knowledge embedded within the model itself (which can be outdated or incomplete), RAG first retrieves relevant information from a knowledge base, allowing the generative model to produce more accurate and informative responses.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.07228134617660985
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 304,
        "candidates_token_count": 66,
        "total_token_count": 370
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:07:55,711 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:08:00,723 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e5d3aba52edbe1e1d3d8, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 21:08:00,723 - INFO - Using JSON file database at: ./json_db
2025-04-10 21:08:00,726 - INFO - Use pytorch device_name: cuda
2025-04-10 21:08:00,726 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:08:03,225 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:08:03,233 - INFO - Calling generate_answers method
2025-04-10 21:08:03,233 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What are vector databases and what are some examples?

Context: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector. Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 21:08:05,254 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings.  These embeddings represent the semantic meaning and relationships of data like text and images in a numerical format.  Examples of popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.04163681483659588
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 295,
        "candidates_token_count": 61,
        "total_token_count": 356
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:08:05,259 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:08:10,269 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e5ddaba52edbe1e1d3d9, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 21:08:10,270 - INFO - Using JSON file database at: ./json_db
2025-04-10 21:08:10,274 - INFO - Use pytorch device_name: cuda
2025-04-10 21:08:10,274 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:08:13,237 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:08:13,251 - INFO - Calling generate_answers method
2025-04-10 21:08:13,251 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems?

Context: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources. Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 21:08:15,668 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Evaluation metrics for RAG systems fall into three categories:\n\n1. **Retrieval-focused metrics:** These assess the quality of the retrieved documents, including precision, recall, and mean reciprocal rank (MRR).\n\n2. **Generation-focused metrics:** These evaluate the quality of the generated text itself, using metrics like BLEU, ROUGE, and METEOR.\n\n3. **RAG-specific metrics:** These focus on the interplay between retrieval and generation, such as faithfulness (how well the generation reflects the retrieved information) and relevance (how well the generation addresses the original query).\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.11076578851473534
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 301,
        "candidates_token_count": 118,
        "total_token_count": 419
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:08:15,678 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:08:20,689 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e5e7aba52edbe1e1d3da, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 21:08:20,689 - INFO - Using JSON file database at: ./json_db
2025-04-10 21:08:20,691 - INFO - Use pytorch device_name: cuda
2025-04-10 21:08:20,691 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:08:23,538 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:08:23,556 - INFO - Calling generate_answers method
2025-04-10 21:08:23,556 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What documents are required for customer identification when opening a savings account?

Context: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions. Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 21:08:25,573 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the \"Standard Operating Procedure for Opening a Savings Account\" document, the required documents for customer identification are a valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID) and a separate document providing the customer's name and address.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.11462942759195964
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 560,
        "candidates_token_count": 54,
        "total_token_count": 614
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:08:25,580 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:08:30,591 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e5f1aba52edbe1e1d3db, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 21:08:30,591 - INFO - Using JSON file database at: ./json_db
2025-04-10 21:08:30,593 - INFO - Use pytorch device_name: cuda
2025-04-10 21:08:30,593 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:08:33,192 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:08:33,207 - INFO - Calling generate_answers method
2025-04-10 21:08:33,208 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What are the minimum eligibility requirements for a personal loan under these guidelines?

Context: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions. Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 21:08:35,345 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the provided \"Personal Loan Disbursement Guidelines,\" the minimum eligibility requirements for a personal loan are:\n\n* **Minimum monthly income:** \u20b925,000\n* **Age:** 21-60 years\n* **Credit score:** Above 700\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.021648257970809937
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 561,
        "candidates_token_count": 60,
        "total_token_count": 621
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:08:35,351 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:08:40,363 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e5fbaba52edbe1e1d3dc, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 21:08:40,364 - INFO - Using JSON file database at: ./json_db
2025-04-10 21:08:40,371 - INFO - Use pytorch device_name: cuda
2025-04-10 21:08:40,371 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:08:43,037 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:08:43,051 - INFO - Calling generate_answers method
2025-04-10 21:08:43,051 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What is the resolution timeline for ATM transaction disputes?

Context: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence. Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 21:08:44,936 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the provided text from the \"Procedure for Handling ATM Disputes (Customer Service Manual)\", ATM transaction disputes must be resolved within **7 working days**.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.06235751798076014
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 557,
        "candidates_token_count": 31,
        "total_token_count": 588
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:08:44,952 - INFO - Evaluation completed with 6 results
2025-04-10 21:08:44,954 - INFO - Generated metrics reports: reports/rag_evaluation_report_20250410_210844.html
2025-04-10 21:08:44,954 - INFO - Generated metrics report at: {'html': 'reports/rag_evaluation_report_20250410_210844.html'}
2025-04-10 21:08:53,120 - INFO - Cleaning up ChromaDB collection...
2025-04-10 21:08:53,120 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:08:58,131 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e60daba52edbe1e1d3ea, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 21:08:58,132 - INFO - Using JSON file database at: ./json_db
2025-04-10 21:08:58,139 - INFO - Use pytorch device_name: cuda
2025-04-10 21:08:58,140 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:09:01,096 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:09:01,097 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:09:06,106 - WARNING - Failed to connect to MongoDB: localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 5.0s, Topology Description: <TopologyDescription id: 67f7e615aba52edbe1e1d3eb, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [Errno 111] Connection refused (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>. Falling back to JSON file database.
2025-04-10 21:09:06,107 - INFO - Using JSON file database at: ./json_db
2025-04-10 21:09:06,142 - INFO - Successfully cleaned up eval_docs collection.
2025-04-10 21:09:06,143 - INFO - ChromaDB cleanup completed.
2025-04-10 21:41:04,688 - INFO - Note: NumExpr detected 24 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 16.
2025-04-10 21:41:04,688 - INFO - NumExpr defaulting to 16 threads.
2025-04-10 21:41:04,896 - INFO - PyTorch version 2.3.1 available.
2025-04-10 21:41:07,078 - INFO - Setting up database connection...
2025-04-10 21:41:07,078 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:41:07,083 - INFO - Successfully connected to MongoDB at None
2025-04-10 21:41:07,084 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 21:41:07,084 - INFO - Loading data from sample_data.csv...
2025-04-10 21:41:07,088 - INFO - Loaded 6 chunks from CSV file: sample_data.csv using utf-8 encoding
2025-04-10 21:41:07,092 - INFO - Dataset stored with ID: 67f7ed9b7d1ad30f09bef210
2025-04-10 21:41:07,092 - INFO - Adding chunks to vector store...
2025-04-10 21:41:07,092 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:41:07,095 - INFO - Successfully connected to MongoDB at None
2025-04-10 21:41:07,096 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 21:41:07,100 - INFO - Use pytorch device_name: cuda
2025-04-10 21:41:07,100 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:41:10,664 - INFO - Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
2025-04-10 21:41:10,735 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:41:11,346 - INFO - Chunks successfully added to vector store
2025-04-10 21:41:11,346 - INFO - Generating synthetic QA pairs using Gemini 1.5 Flash...
2025-04-10 21:41:11,350 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 21:41:12,347 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?\nAnswer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, addressing limitations by using a retrieval component to fetch relevant information before generating a response.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.059445188159034365
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 63,
        "total_token_count": 182
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:41:12,348 - INFO - Final extracted text: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?
Answer: RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources, addressing limitations by using a retrieval component to fetch relevant information before generating a response.

2025-04-10 21:41:12,348 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 21:41:12,351 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 21:41:13,465 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are vector databases and what types of data do they typically handle?\nAnswer: Vector databases are specialized database systems that store and efficiently query high-dimensional vector embeddings, which represent semantic information from text, images, or other data types in a numerical format.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.1565846703269265
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 119,
        "candidates_token_count": 55,
        "total_token_count": 174
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:41:13,465 - INFO - Final extracted text: Question: What are vector databases and what types of data do they typically handle?
Answer: Vector databases are specialized database systems that store and efficiently query high-dimensional vector embeddings, which represent semantic information from text, images, or other data types in a numerical format.

2025-04-10 21:41:13,465 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 21:41:13,469 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query.
2025-04-10 21:41:14,557 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems?\nAnswer: RAG systems are evaluated using retrieval-focused metrics (e.g., precision, recall, MRR) which assess document retrieval, and generation-focused metrics (e.g., BLEU, ROUGE, METEOR) which assess the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance are used.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.023328248659769693
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 126,
        "candidates_token_count": 90,
        "total_token_count": 216
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:41:14,558 - INFO - Final extracted text: Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems?
Answer: RAG systems are evaluated using retrieval-focused metrics (e.g., precision, recall, MRR) which assess document retrieval, and generation-focused metrics (e.g., BLEU, ROUGE, METEOR) which assess the quality of the generated text.  Additionally, RAG-specific metrics like faithfulness and relevance are used.

2025-04-10 21:41:14,558 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 21:41:14,560 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made.
2025-04-10 21:41:15,272 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What documents are required for customer identification when opening a savings account?\nAnswer: A valid government-issued ID such as Aadhaar, PAN, Passport, or Voter ID is required.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.022281083464622497
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 208,
        "candidates_token_count": 40,
        "total_token_count": 248
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:41:15,272 - INFO - Final extracted text: Question: What documents are required for customer identification when opening a savings account?
Answer: A valid government-issued ID such as Aadhaar, PAN, Passport, or Voter ID is required.

2025-04-10 21:41:15,272 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 21:41:15,275 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 21:41:16,471 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What are the minimum income requirements and age limits for a personal loan applicant?\nAnswer: Salaried individuals must have a minimum monthly income of \u20b925,000 and be between 21 and 60 years old.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.07863236408607632
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 200,
        "candidates_token_count": 51,
        "total_token_count": 251
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:41:16,471 - INFO - Final extracted text: Question: What are the minimum income requirements and age limits for a personal loan applicant?
Answer: Salaried individuals must have a minimum monthly income of ₹25,000 and be between 21 and 60 years old.

2025-04-10 21:41:16,480 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 21:41:16,483 - INFO - Prompt sent to Gemini model: Generate 1 question-answer pairs from the following text. Format each pair as 'Question: <question>
Answer: <answer>'

Text: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 21:41:17,116 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Question: What is the resolution timeline for ATM transaction disputes?\nAnswer: Disputes must be resolved within 7 working days.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.015642092778132513
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 218,
        "candidates_token_count": 26,
        "total_token_count": 244
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:41:17,116 - INFO - Final extracted text: Question: What is the resolution timeline for ATM transaction disputes?
Answer: Disputes must be resolved within 7 working days.

2025-04-10 21:41:17,116 - INFO - Successfully parsed 1 QA pairs.
2025-04-10 21:41:17,132 - INFO - Generated 6 QA pairs
2025-04-10 21:41:17,132 - INFO - Creating test suite...
2025-04-10 21:41:17,135 - INFO - Test suite created with ID: 67f7eda57d1ad30f09bef219
2025-04-10 21:41:17,135 - INFO - Running evaluation with Gemini 1.5 Flash...
2025-04-10 21:41:17,137 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:41:17,140 - INFO - Successfully connected to MongoDB at None
2025-04-10 21:41:17,142 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 21:41:17,144 - INFO - Use pytorch device_name: cuda
2025-04-10 21:41:17,144 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:41:19,728 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:41:19,767 - INFO - Calling generate_answers method
2025-04-10 21:41:19,767 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: How does the Retrieval-Augmented Generation (RAG) approach improve upon traditional large language models?

Context: The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources. Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 21:41:22,095 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "RAG improves upon traditional large language models by grounding their generations in external, up-to-date knowledge sources.  Instead of relying solely on the knowledge embedded within the model during training, RAG retrieves relevant information from a knowledge base before generating a response. This allows for more accurate and informative responses, addressing the limitations of LLMs that may have outdated or incomplete information.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.14646589433824694
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 304,
        "candidates_token_count": 74,
        "total_token_count": 378
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:41:23,675 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:41:23,678 - INFO - Successfully connected to MongoDB at None
2025-04-10 21:41:23,678 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 21:41:23,681 - INFO - Use pytorch device_name: cuda
2025-04-10 21:41:23,681 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:41:26,220 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:41:26,238 - INFO - Calling generate_answers method
2025-04-10 21:41:26,238 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What are vector databases and what types of data do they typically handle?

Context: Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector. Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources.
2025-04-10 21:41:27,207 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings.  These embeddings represent semantic information about text, images, or other data types in a numerical format.  They typically handle data that has been transformed into vector representations, capturing the meaning and relationships between data points.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.10385733745137199
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 299,
        "candidates_token_count": 61,
        "total_token_count": 360
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:41:27,214 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:41:27,216 - INFO - Successfully connected to MongoDB at None
2025-04-10 21:41:27,217 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 21:41:27,220 - INFO - Use pytorch device_name: cuda
2025-04-10 21:41:27,220 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:41:29,761 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:41:29,770 - INFO - Calling generate_answers method
2025-04-10 21:41:29,770 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What types of metrics are used to evaluate Retrieval Augmented Generation (RAG) systems?

Context: Evaluation metrics for RAG systems include both retrieval-focused metrics and generation-focused metrics. Retrieval metrics like precision, recall, and mean reciprocal rank (MRR) assess how well the system retrieves relevant documents. Generation metrics like BLEU, ROUGE, and METEOR evaluate the quality of the generated text by comparing it to reference answers. Additionally, RAG-specific metrics such as faithfulness and relevance help measure how well the generated response uses the retrieved information and addresses the original query. The Retrieval-Augmented Generation (RAG) approach combines the strengths of retrieval-based and generation-based methods for natural language processing tasks. In RAG, a retrieval component first fetches relevant documents or passages from a knowledge base, and then a generative model uses this retrieved information to produce more accurate and informative responses. This approach helps address the limitations of large language models by grounding their generations in external, up-to-date knowledge sources. Vector databases are specialized database systems designed to store and efficiently query high-dimensional vector embeddings. These embeddings represent semantic information about text, images, or other data types in a numerical format that captures their meaning and relationships. Popular vector databases include Pinecone, Weaviate, Milvus, and ChromaDB. They typically support similarity search operations like k-nearest neighbors (kNN) to find the most similar vectors to a query vector.
2025-04-10 21:41:31,961 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Evaluation metrics for RAG systems include:\n\n* **Retrieval-focused metrics:** precision, recall, and mean reciprocal rank (MRR), assessing the relevance of retrieved documents.\n* **Generation-focused metrics:** BLEU, ROUGE, and METEOR, evaluating the quality of the generated text against reference answers.\n* **RAG-specific metrics:** faithfulness and relevance, measuring how well the generated response uses retrieved information and addresses the original query.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.0362664683834537
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 301,
        "candidates_token_count": 91,
        "total_token_count": 392
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:41:31,973 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:41:31,976 - INFO - Successfully connected to MongoDB at None
2025-04-10 21:41:31,977 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 21:41:31,979 - INFO - Use pytorch device_name: cuda
2025-04-10 21:41:31,979 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:41:34,543 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:41:34,558 - INFO - Calling generate_answers method
2025-04-10 21:41:34,558 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What documents are required for customer identification when opening a savings account?

Context: Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions. Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 21:41:36,508 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the \"Standard Operating Procedure for Opening a Savings Account\" document, the required documents for customer identification are a valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID) and a name and address proof.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.04119338095188141
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 560,
        "candidates_token_count": 48,
        "total_token_count": 608
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:41:36,515 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:41:36,518 - INFO - Successfully connected to MongoDB at None
2025-04-10 21:41:36,519 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 21:41:36,522 - INFO - Use pytorch device_name: cuda
2025-04-10 21:41:36,522 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:41:39,222 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:41:39,239 - INFO - Calling generate_answers method
2025-04-10 21:41:39,239 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What are the minimum income requirements and age limits for a personal loan applicant?

Context: Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions. Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence.
2025-04-10 21:41:41,276 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the provided text from \"Personal Loan Disbursement Guidelines (Retail Banking Division),\" the minimum monthly income requirement for a salaried individual applying for a personal loan is \u20b925,000.  The age limit is between 21 and 60 years.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.07261205137821666
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 562,
        "candidates_token_count": 57,
        "total_token_count": 619
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:41:41,281 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:41:41,284 - INFO - Successfully connected to MongoDB at None
2025-04-10 21:41:41,285 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 21:41:41,288 - INFO - Use pytorch device_name: cuda
2025-04-10 21:41:41,288 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:41:45,621 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:41:45,636 - INFO - Calling generate_answers method
2025-04-10 21:41:45,636 - INFO - Prompt sent to Gemini model: Answer the following question based on the context: Question: What is the resolution timeline for ATM transaction disputes?

Context: Document Title: Procedure for Handling ATM Disputes (Customer Service Manual)

In case of a failed ATM transaction (e.g., cash not dispensed but amount debited), follow this resolution process:

Complaint Lodgment:

Customer can register a dispute via branch, call center, or mobile app.

Obtain transaction details: date, time, ATM ID, amount.

Initial Acknowledgment:

Send a complaint receipt SMS/email to the customer within 2 hours.

Investigation:

Check ATM logs and switch data.

If the cash was not dispensed, raise a chargeback request with the card network (Visa/Mastercard/RuPay).

Resolution Timeline:

Disputes must be resolved within 7 working days.

Refund must be credited to the customer's account if found valid.

Customer Notification:

Inform customer of the outcome via SMS/email.

Provide a reference number for future correspondence. Document Title: Standard Operating Procedure for Opening a Savings Account
To open a savings account, follow the steps below:
Customer Identification: Collect valid government-issued ID (Aadhaar, PAN, Passport, or Voter ID). Verify against the name and address proof provided.
KYC Compliance: Ensure Know Your Customer (KYC) form is filled. Cross-check against the Central KYC Registry.
Customer Due Diligence:
For low-risk customers: proceed with normal due diligence.
For high-risk customers (e.g., politically exposed persons), escalate to Compliance for enhanced due diligence.
Account Creation: Enter details in the Core Banking System (CBS) and assign a unique Customer ID.
Welcome Kit & Activation: Provide account number, cheque book, debit card (if opted), and mobile banking setup. Account becomes active once the initial deposit is made. Document Title: Personal Loan Disbursement Guidelines (Retail Banking Division)

Eligibility Check:

Salaried individuals must have a minimum monthly income of ?25,000.

Age limit: 21�60 years.

Credit score must be above 700.

Document Collection:

Income proof (salary slips or ITR for 2 years)

Address proof

Identity proof

Bank statements (last 6 months)

Loan Sanctioning:

Based on risk profile, tenure, and repayment capacity.

Use the internal Loan Management System (LMS) to evaluate and approve.

Disbursement:

Post-approval, the loan amount is transferred to the applicant's bank account.

Disbursement letter and repayment schedule are issued.

ECS mandate is activated for EMI deductions.
2025-04-10 21:41:47,493 - INFO - Received response from Gemini model: response:
GenerateContentResponse(
    done=True,
    iterator=None,
    result=protos.GenerateContentResponse({
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "Based on the provided text from the \"Procedure for Handling ATM Disputes (Customer Service Manual),\" ATM transaction disputes must be resolved within **7 working days**.\n"
              }
            ],
            "role": "model"
          },
          "finish_reason": "STOP",
          "avg_logprobs": -0.036555982405139555
        }
      ],
      "usage_metadata": {
        "prompt_token_count": 557,
        "candidates_token_count": 31,
        "total_token_count": 588
      },
      "model_version": "gemini-1.5-flash"
    }),
)
2025-04-10 21:41:47,522 - INFO - Evaluation completed with 6 results
2025-04-10 21:41:47,525 - INFO - Generated metrics reports: reports/rag_evaluation_report_20250410_214147.html
2025-04-10 21:41:47,525 - INFO - Generated metrics report at: {'html': 'reports/rag_evaluation_report_20250410_214147.html'}
2025-04-10 21:51:24,825 - INFO - Cleaning up ChromaDB collection...
2025-04-10 21:51:24,834 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:51:24,837 - INFO - Successfully connected to MongoDB at None
2025-04-10 21:51:24,838 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 21:51:24,847 - INFO - Use pytorch device_name: cuda
2025-04-10 21:51:24,847 - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-04-10 21:51:28,071 - INFO - Successfully retrieved existing eval_docs collection.
2025-04-10 21:51:28,071 - INFO - Attempting to connect to MongoDB at None
2025-04-10 21:51:28,074 - INFO - Successfully connected to MongoDB at None
2025-04-10 21:51:28,075 - INFO - Connected to MongoDB: None, Database: rag_evaluation
2025-04-10 21:51:28,105 - INFO - Successfully cleaned up eval_docs collection.
2025-04-10 21:51:28,105 - INFO - ChromaDB cleanup completed.
